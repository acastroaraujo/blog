{
  "hash": "698ccd2fec542aa79233e19562d83cca",
  "result": {
    "markdown": "---\ntitle: \"Optimization in R\"\ndescription: |\n  A few different ways to do optimization.\nauthor: andrés castro araújo\ncategories:\n  - R\ndate: 01-24-2021\nfig-height: 3\nfig-width: 5\nexecute: \n  echo: true\n---\n\n\n*Finding the peak of parabola*\n\n$$y = 15 + 10x - 2x^2$$\n\nFirst we write this statement as an R function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparabola <- function(x) 15 + 10*x - 2*x^2 \n```\n:::\n\n\nThen we can visualize it using `curve()` or `ggplot2`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggplot2)\ntheme_set(theme_light(base_family = \"Optima\"))\n\ng <- ggplot() + \n  geom_function(fun = parabola) +\n  xlim(0, 5) +\n  labs(x = \"x\", y = \"f(x)\")\n\ng\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){fig-align='center' width=480}\n:::\n:::\n\n\nThen we call `optimize()`, which takes the function as its first argument, the interval as its second, and an optional argument indicating whether or not you are searching for the function's maximum (minimize is the default).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nout <- optimize(parabola, interval = c(-100, 100), maximum = TRUE)\nout\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$maximum\n[1] 2.5\n\n$objective\n[1] 27.5\n```\n:::\n\n```{.r .cell-code}\ng + geom_vline(xintercept = out$maximum, linetype = \"dashed\") +\n    geom_hline(yintercept = out$objective, linetype = \"dashed\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){fig-align='center' width=480}\n:::\n:::\n\n\nThere are many more ways of using optimization in R. For example, if you want to find the maximum of a function with many parameters you can use `optim()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nopt <- optim(\n  par = 99, ## initial values; use c(...) to do it with many parameters\n  fn = parabola, \n  method = \"BFGS\",\n  # this next line is critical: \n  # it tells R to maximize rather than minimize\n  control = list(fnscale = -1)\n)\n\nopt\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$par\n[1] 2.5\n\n$value\n[1] 27.5\n\n$counts\nfunction gradient \n       6        3 \n\n$convergence\n[1] 0\n\n$message\nNULL\n```\n:::\n:::\n\n\n## Logistic Regression\n\nIn statistics we usually try to find the maximum of likelihood functions in order to fit regression models.\n\nFor example[^1], a simple logistic regression can be fit by doing the following:\n\n[^1]: The data: «*A survey of 3020 residents in a small area of Bangladesh suffering from arsenic contamination of groundwater. Respondents with elevated arsenic levels in their wells had been encouraged to switch their water source to a safe public or private well in the nearby area and the survey was conducted several years later to learn which of the affected residents had switched wells»*\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## The dataset\ndata(\"wells\", package = \"rstanarm\")\nstr(wells)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t3020 obs. of  5 variables:\n $ switch : int  1 1 0 1 1 1 1 1 1 1 ...\n $ arsenic: num  2.36 0.71 2.07 1.15 1.1 3.9 2.97 3.24 3.28 2.52 ...\n $ dist   : num  16.8 47.3 21 21.5 40.9 ...\n $ assoc  : int  0 0 0 0 1 1 1 0 1 1 ...\n $ educ   : int  0 0 10 12 14 9 4 10 0 0 ...\n```\n:::\n\n```{.r .cell-code}\n## The model\nf <- formula(switch ~ dist + arsenic + dist:arsenic)\n\n## The design matrix\nX <- model.matrix(f, data = wells)\ndim(X)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3020    4\n```\n:::\n\n```{.r .cell-code}\n## The outcome variable\ny <- wells$switch\n\n## The log-likelihood function\nlog_likelihood <- function(beta, outcome, dmat) {\n  \n  linpred <- dmat %*% beta ## the linear predictor\n  p <- plogis(linpred)     ## the link function\n  \n  sum(dbinom(outcome, size = 1, prob = p, log = TRUE))  ## the log-likelihood\n}\n\n## The maximum likelihood estimate (MLE)\nopt <- optim(\n  par = rep(0, ncol(X)), ## initial values are all 0's\n  fn = log_likelihood, method = \"BFGS\",\n  outcome = y, dmat = X,\n  # this next line is critical: \n  # it tells R to maximize rather than minimize\n  control = list(fnscale = -1)\n)\n\nnames(opt$par) <- colnames(X)\nopt$par\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n (Intercept)         dist      arsenic dist:arsenic \n-0.147139626 -0.005811349  0.555574583 -0.001768792 \n```\n:::\n:::\n\n\nWe can compare this to the outcome given by R's `glm()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit <- glm(f, data = wells, family = binomial(link = \"logit\"))\ncoefficients(fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n (Intercept)         dist      arsenic dist:arsenic \n-0.147868069 -0.005772178  0.555976744 -0.001789060 \n```\n:::\n:::\n\n\n## Stan\n\nUsers of [**Stan**](https://mc-stan.org/) should know that it can be used for optimization as well.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(cmdstanr)\nmcmc_optim <- cmdstan_model(\"simple_parabola.stan\")\nmcmc_optim$print()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nparameters {\n  real<lower=0> x; // easily does constrained optimization\n}\n\nmodel {\n  target += 15 + 10*x - 2*x^2;\n}\n```\n:::\n\n```{.r .cell-code}\nfit <- mcmc_optim$optimize()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nInitial log joint probability = 17.7521 \n    Iter      log prob        ||dx||      ||grad||       alpha      alpha0  # evals  Notes  \n       4          27.5    0.00019008   2.86238e-06           1           1       12    \nOptimization terminated normally:  \n  Convergence detected: relative gradient magnitude is below tolerance \nFinished in  0.3 seconds.\n```\n:::\n\n```{.r .cell-code}\nfit\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n variable estimate\n     lp__    27.50\n     x        2.50\n```\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}